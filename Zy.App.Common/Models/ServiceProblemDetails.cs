using Microsoft.AspNetCore.Http;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;
using Zy.App.Common.AppExtensions;
using Zy.App.Common.Interfaces;

namespace Zy.App.Common.Models
{
    [DataContract]
    public class ServiceProblemDetails : IServiceProblemDetails
    {
        public ServiceProblemDetails()
            : this(string.Empty)
        {
            this.Status = StatusCodes.Status400BadRequest;
        }

        public ServiceProblemDetails(Error error)
            : this(error.Type, error.Title, error.Detail)
        {
        }

        public ServiceProblemDetails(string type)
            : this(type, string.Empty)
        {

        }

        public ServiceProblemDetails(string type, string title)
            : this(type, title, string.Empty)
        {
        }

        public ServiceProblemDetails(string type, string title, string detail)
            : this(type, title, detail, null)
        {
        }

        public ServiceProblemDetails(string type, string? title, string? detail, Exception? exception)
        {
            this.Type = type;
            this.Title = title ?? "";
            this.Detail = detail ?? "";
            this.Exception = exception;
            this.Status = StatusCodes.Status400BadRequest;
        }

        /// <summary>
        /// A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when
        /// dereferenced, it provide human-readable documentation for the problem type
        /// (e.g., using HTML [W3C.REC-html5-20141028]).  When this member is not present, its value is assumed to be
        /// "about:blank".
        /// </summary>
        [DataMember(Order = 1)]
        public string Type { get; set; }

        /// <summary>
        /// A short, human-readable summary of the problem type.It SHOULD NOT change from occurrence to occurrence
        /// of the problem, except for purposes of localization(e.g., using proactive content negotiation;
        /// see[RFC7231], Section 3.4).
        /// </summary>
        [DataMember(Order = 2)]
        public string Title { get; set; }

        /// <summary>
        /// The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
        /// </summary>
        [DataMember(Order = 3)]
        public int? Status { get; set; }

        /// <summary>
        /// A human-readable explanation specific to this occurrence of the problem.
        /// </summary>
        [DataMember(Order = 4)]
        public string Detail { get; set; }

        /// <summary>
        /// A URI reference that identifies the specific occurrence of the problem.It may or may not yield further information if dereferenced.
        /// </summary>
        [DataMember(Order = 5)]
        public string Instance { get; set; } = string.Empty;

        /// <summary>
        /// Gets the <see cref="IDictionary{TKey, TValue}"/> for extension members.
        /// <para>
        /// Problem type definitions MAY extend the problem details object with additional members. Extension members appear in the same namespace as
        /// other members of a problem type.
        /// </para>
        /// </summary>
        /// <remarks>
        /// The round-tripping behavior for <see cref="Extensions"/> is determined by the implementation of the Input \ Output formatters.
        /// In particular, complex types or collection types may not round-trip to the original type when using the built-in JSON or XML formatters.
        /// </remarks>
        [JsonExtensionData]
        public virtual IDictionary<string, object> Extensions { get; } = new Dictionary<string, object>(StringComparer.Ordinal);

        [JsonIgnore]
        public Exception? Exception { get; set; }
    }
}
